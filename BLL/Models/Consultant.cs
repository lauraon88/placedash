using System;
using System.Collections.Generic;
using DAL;
using System.Linq; //need to reference system.linq here so that linq statements can be written in the code
using System.Data.Entity;


namespace BLL.Models
{
    public partial class Consultant
    {
        #region properties

        private int _id; //convention for writing private ints is using underscore and the name i.e. public int Id ===> private int _id
        private string _FirstName;
        private string _Surname;
        private string _Email;
        private string _PhoneNumber;
        public int Id //method to get the private value of the public int
        {
            get { return _id; } //don't need to set(mutator) an id property as it is auto generated by the database, therefore only nned to get (accessor)
        }

        public string FirstName
        {
            get { return _FirstName; } //need a return type here
            set { _FirstName = value; } //needs to be set equal to a value
        }

        public string Surname
        {
            get { return _Surname; }
            set { _Surname = value; }
        }

        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }
        public string PhoneNumber
        {
            get { return _PhoneNumber; }
            set { _PhoneNumber = value; }
        }
        public virtual ICollection<Consultant_Project> Consultant_Project { get; set; }
        /*virtual modifier tells the compiler that when any class derived from the main class, an override method should be called
         * virtual property allows the EF to create a proxy around the virtual property so that the property can support lazy loading and more efficient change tracking
         * private virtual classses cannot be declared in c# 
         * virtual methods are an implementation of type based polymorphism - it gives an entry point for derived classes to use base class type*/
        #endregion

        #region constructors
        public Consultant()
        {
            this.Consultant_Project = new List<Consultant_Project>();
        }

        /// <summary>
        /// This is the ***READ*** method for a user to view the consultant details via the consultant id
        /// Constructors are specialised methods, they create instances of classes, when they have parameters, the new keyword must be used with them
        /// </summary>
        /// <param name="idIN"></param>
        public Consultant(int idIN) //constructors are class methods that are executed when an object of a given type is created
        {
            try
            {
                //from the dashboard model container in DAL, create a new container called 'DB'
                //a constructor is invoked with a new keyword
                using (DAL.DashboardModelContainer DB = new DashboardModelContainer())
                {
                    //create a new consultant in the DB called DBConsultant and set it equal to the idIN, which matches an ID in the DB
                    DAL.Consultant DBConsultant = (from c in DB.Consultants where c.Id == idIN select c).FirstOrDefault();

                    //if the found DBConsultant is not zero then return the values associated with the entered id (idIN) to this class instance 
                    if (DBConsultant.Surname != "" )
                    {
                        this._id = idIN;
                        this._Surname = DBConsultant.Surname;
                        this._FirstName = DBConsultant.FirstName;
                        this._Email = DBConsultant.Email;
                        this._PhoneNumber = DBConsultant.PhoneNumber;

                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error: " + e);
            }
        }

        /// <summary>
        /// This method ***ADDS*** a new consultant to the database
        /// </summary>
        /// <param name="FirstNameIN"></param>
        /// <param name="SurnameIN"></param>
        /// <param name="EmailIN"></param>
        /// <param name="PhoneNumberIN"></param>
        public Consultant(string FirstNameIN, string SurnameIN, string EmailIN, string PhoneNumberIN)
        {
            try
            {
                using (DAL.DashboardModelContainer DB = new DashboardModelContainer())
                {
                    DAL.Consultant newDBConsultant = new DAL.Consultant();

                    newDBConsultant.FirstName = FirstNameIN;
                    newDBConsultant.Surname = SurnameIN;
                    newDBConsultant.Email = EmailIN;
                    newDBConsultant.PhoneNumber = PhoneNumberIN;

                    DB.Consultants.Add(newDBConsultant);
                    DB.SaveChanges();

                    this._id = newDBConsultant.Id;
                    this._FirstName = newDBConsultant.FirstName;
                    this._Surname = newDBConsultant.Surname;
                    this._Email = newDBConsultant.Email;
                    this._PhoneNumber = newDBConsultant.PhoneNumber;
                }
            }
            catch(Exception e)
            {
                Console.WriteLine("Error " + e);
            }
        }
        #endregion

        #region public methods

        public Boolean deleteConsultant()
        {
            Boolean deleteStatus = false;

            try
            {
                using (DAL.DashboardModelContainer DB = new DashboardModelContainer())
                {
                    if (this.Id != 0)
                    {
                        DAL.Consultant DBConsultant = (from c in DB.Consultants where c.Id == _id select c).FirstOrDefault();
                        if (DBConsultant.Id != 0)
                        {
                            DB.Consultants.Remove(DBConsultant);
                            DB.SaveChanges();
                            deleteStatus = true;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                Console.WriteLine("Error " + e);
            }
            return deleteStatus;
        }

        public Boolean editConsultant(string updateFirstName, string updateSurname, string updateEmail, string updatePhoneNumber)
        {
            Boolean editStatus = false;
            try
            {
                using (DAL.DashboardModelContainer DB = new DashboardModelContainer())
                {
                    DAL.Consultant DBConsultant = (from c in DB.Consultants where c.Id == _id select c).FirstOrDefault();

                    if (DBConsultant.Id != 0)
                    {
                        DBConsultant.FirstName = updateFirstName;
                        DBConsultant.Surname = updateSurname;
                        DBConsultant.Email = updateEmail;
                        DBConsultant.PhoneNumber = updatePhoneNumber;

                        DB.SaveChanges();
                        editStatus = true;
                    }

                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error " + e);

            }
            return editStatus;
        }
        #endregion
    }
}
